<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 搜索spring控件 -->
    <context:component-scan base-package="com.dots.service,com.dots.dao,com.dots.controller"/>

    <!--动态代理实现 不用写dao的实现 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.dots.dao"/>
        <property name="sqlSessionFactoryBeanName" value="mSqlSessionFactory"/>
    </bean>

    <!--多数据源配置，并指定默认配置数据源-->
    <bean id="dataSource" class="com.dots.util.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="dataSource1" value-ref="dataSource1"></entry>
                <entry key="dataSource2" value-ref="dataSource2"></entry>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSource1"></property>
    </bean>

    <!-- id的名称不能就叫sqlSessionFactory，会引起加载问题，待研究 -->
    <bean id="mSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 加载mybatis mapper文件的配置 -->
        <property name="mapperLocations" value="classpath*:mybatis/*.xml"/>
    </bean>

    <context:property-placeholder location="classpath*:JDBC.properties" />
    <bean id="dataSource1" class="org.apache.commons.dbcp2.BasicDataSource"  destroy-method="close">
        <property name="driverClassName" value="${db1.driver}"/>
        <property name="url" value="${db1.url}" />
        <property name="username" value="${db1.username}" />
        <property name="password" value="${db1.password}" />
    </bean>

    <bean id="dataSource2" class="org.apache.commons.dbcp2.BasicDataSource"  destroy-method="close">
        <property name="driverClassName" value="${db2.driver}"/>
        <property name="url" value="${db2.url}" />
        <property name="username" value="${db2.username}" />
        <property name="password" value="${db2.password}" />
    </bean>


    <!-- 数据源动态切换切面配置 -->
<!--    <aop:config>-->
<!--        <aop:aspect id="dataSourceAspect" ref="dataSourceInterceptor" order="1">-->
<!--            &lt;!&ndash; 拦截所有service实现类的方法 &ndash;&gt;-->
<!--            <aop:pointcut id="dataSourcePointcut"-->
<!--                          expression="execution(* com.dots.service.*.*(..))"/>-->
<!--            <aop:before pointcut-ref="dataSourcePointcut" method="intercept" />-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->

    <!-- 数据源动态切换实体 -->
<!--    <bean id="dataSourceInterceptor" class="com.dots.annotation.DataSourceProcess"/>-->






    <!-- 视图页面配置 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix">
            <value>/WEB-INF/views/</value>
        </property>
        <property name="suffix">
            <value>.jsp</value>
        </property>
    </bean>
</beans>